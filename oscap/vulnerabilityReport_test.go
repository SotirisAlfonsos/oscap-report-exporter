package oscap

import (
	"github.com/stretchr/testify/assert"
	"oscap-report-exporter/common"
	"testing"
)

var (
	vulnRep = &VulnerabilityReport{
		GlobalVulnerabilityReportHTTPSLocation: "https://www.redhat.com/security/data/metrics/ds/com.redhat.rhsa-all.ds.xml",
		UserName:                               "",
		Password:                               "",
	}
)

func TestDownloadFileSuccess(t *testing.T) {

	config := &Config{
		WorkingFolder: "/tmp/",
		FileName:      "com.redhat.rhsa-all.ds.xml",
	}

	downloadFilePath := config.WorkingFolder + config.FileName

	err := vulnRep.DownloadFile(downloadFilePath, logger)
	assert.NoError(t, err)

	err = common.FileExists(downloadFilePath)
	assert.NoError(t, err)

	filesToClean := []string{config.FileName}
	config.cleanFiles(filesToClean, logger)
}

func TestDownloadFileWrongUrl(t *testing.T) {

	config := &Config{
		WorkingFolder: "/tmp/",
		FileName:      "com.redhat.rhsa-all.ds.xml",
	}

	vulnRep.GlobalVulnerabilityReportHTTPSLocation = "http://localhost/url.does.not.exist"

	downloadFilePath := config.WorkingFolder + config.FileName

	err := vulnRep.DownloadFile(downloadFilePath, logger)
	assert.Error(t, err)

	err = common.FileExists(downloadFilePath)
	assert.Error(t, err)
}

func TestDownloadFileCouldNotCreateTmp(t *testing.T) {
	config := &Config{
		WorkingFolder: "/working/dir/path/does/not/exist/",
		FileName:      "com.redhat.rhsa-all.ds.xml",
	}
	downloadFilePath := config.WorkingFolder + config.FileName

	err := vulnRep.DownloadFile(downloadFilePath, logger)
	assert.Error(t, err)

	err = common.FileExists(downloadFilePath)
	assert.Error(t, err)
}

func TestDownloadFileEmptyUrl(t *testing.T) {
	config := &Config{
		WorkingFolder: "/tmp/",
		FileName:      "com.redhat.rhsa-all.ds.xml",
	}
	downloadFilePath := config.WorkingFolder + config.FileName

	vulnRep.GlobalVulnerabilityReportHTTPSLocation = ""

	err := vulnRep.DownloadFile(downloadFilePath, logger)
	assert.NoError(t, err)

	err = common.FileExists(downloadFilePath)
	assert.Error(t, err)

}
